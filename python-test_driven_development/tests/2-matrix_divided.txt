>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test normal case
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test that original matrix is unchanged
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

# Test with floats
>>> matrix = [[1.1, -2.2, 3.3], [4.4, 5.5, -6.6]]
>>> print(matrix_divided(matrix, 2))
[[0.55, -1.1, 1.65], [2.2, 2.75, -3.3]]

# Test division by negative number
>>> print(matrix_divided(matrix, -3))
[[-0.37, 0.73, -1.1], [-1.47, -1.83, 2.2]]

# Test division by float
>>> print(matrix_divided(matrix, 2.5))
[[0.44, -0.88, 1.32], [1.76, 2.2, -2.64]]

# Test error for non-number div
>>> matrix_divided(matrix, "not a number")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test error for division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test error for matrix not being a list of lists
>>> matrix_divided([1, 2, 3], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test error for rows of different sizes
>>> matrix_divided([[1, 2, 3], [4, 5]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test float
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, float('inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
